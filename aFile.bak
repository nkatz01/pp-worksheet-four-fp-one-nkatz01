#lang racket



;; 2) find the squid
(define y '(clam squid octopus))
(cadr y)
(define z '(clam starfish (squid octopus) mollusc))
(caaddr z)
;(car(car(cdr(cdr z)))) https://www.cs.drexel.edu/~jpopyack/Courses/AI/Sp18/extras/LISP/CADDDR.html

;; 3) define avg function
(define (avarage l)  (/ (sum l) (length l)))

(define (sum l)
(if (empty? l) 0
     (+ (car l) (sum (cdr l)))))
  
(avarage (list 1 2 3))

;; 4) define myMax function
(define (myMax l)
  (if (empty? (cdr l))
      (car l)
       (if(< (car l) (myMax (cdr l)))
          (myMax (cdr l))
          (car l)

          )
       )
  )
  
(myMax (list 1 3 2))
;; 6) recursive sum
(define (sum l)
(if (empty? l) 0
    
    (+ (car l) (sum (cdr l)))))
(sum (list 1 2 3))
;; 7) tail recursive sum
(define (sumTailR l s)
(if (empty? l) s
    
     (sumTailR (cdr l) (+ (car l) s))

     ))

 (sumTailR (list 1 2 3) 0)

(cons (cons 1 2) (cons 3 (cons 4 5)))
(list 1 2 (cons 3 4) 5)

;;8)106 and 6 respectively. In the second expression, x is new in the second let.

;; 9) 
(define (myLength l)

(if (empty? l)  0
     (+ 1 (myLength (cdr l)))))
(myLength (list 1 3 2))

;q 3 3.
(define (applyPred op y equalTo alist)
 (count identity (map (lambda (x)  (cond((equal? (op x y) equalTo) #t) (else #f)) ) alist)))

  
 (applyPred > 5 #t '(1 2 3 4 5 6))
 (applyPred modulo 2 0 '(1 2 3 4 5 6)) 

  